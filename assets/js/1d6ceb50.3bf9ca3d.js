"use strict";(self.webpackChunkasgardians=self.webpackChunkasgardians||[]).push([[7881],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3352:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return u},assets:function(){return c},toc:function(){return m},default:function(){return g}});var a,i=t(7462),o=t(3366),l=(t(7294),t(3905)),r=["components"],s={},p=void 0,u={permalink:"/AsgardiansCode/blog/Chess-AI",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/blog/blog/Chess-AI.md",source:"@site/blog/Chess-AI.md",title:"Chess-AI",description:"In inital commit all the files need to make the game is included. So go there and start your journey.",date:"2021-10-18T04:30:37.607Z",formattedDate:"October 18, 2021",tags:[],readingTime:4.525,truncated:!1,authors:[],prevItem:{title:"Agile",permalink:"/AsgardiansCode/blog/Agile"},nextItem:{title:"Industry and WFH",permalink:"/AsgardiansCode/blog/Industry"}},c={authorsImageUrls:[]},m=[{value:"Configurations",id:"configurations",children:[{value:"Oriantion",id:"oriantion",children:[]},{value:"Notation",id:"notation",children:[]},{value:"Show Positions and FEN in console",id:"show-positions-and-fen-in-console",children:[]}]},{value:"Events",id:"events",children:[{value:"OnChange",id:"onchange",children:[]}]},{value:"Integrations",id:"integrations",children:[{value:"Only allow legal moves",id:"only-allow-legal-moves",children:[]}]},{value:"Preparing Evaluation Method",id:"preparing-evaluation-method",children:[{value:"Pawns",id:"pawns",children:[]}]},{value:"Centipawn Values",id:"centipawn-values",children:[]}],d=(a="Summery",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),h={toc:m};function g(e){var n=e.components,t=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"In inital commit all the files need to make the game is included. So go there and start your journey."),(0,l.kt)("p",null,"Even though below functions are empty you still need them to get output + we will use them later."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"onDragStart, onDrop, onSnapEnd, onMouseoverSquare, onMouseoutSquare\n")),(0,l.kt)("p",null,"We can use ",(0,l.kt)("inlineCode",{parentName:"p"},"config")," to do the configurations."),(0,l.kt)("details",null,(0,l.kt)(d,{mdxType:"Summery"}),"If you want you can simply delete that and go with board = ChessBoard('board', start);"),(0,l.kt)("p",null,"Note that at this point it only show the Board and the Chess Pieces."),(0,l.kt)("h2",{id:"configurations"},"Configurations"),(0,l.kt)("h3",{id:"oriantion"},"Oriantion"),(0,l.kt)("p",null,"Oriantation can be either white or black which is the side you play."),(0,l.kt)("h3",{id:"notation"},"Notation"),(0,l.kt)("p",null,"Notation is boolean values which used to on and off board notation"),(0,l.kt)("h3",{id:"show-positions-and-fen-in-console"},"Show Positions and FEN in console"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<button id="showPositionBtn">Show position in console</button>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"$('#showPositionBtn').on('click', clickShowPositionBtn)\n\nfunction clickShowPositionBtn () {\n    console.log('Current position as an Object:')\n    console.log(board.position())\n\n    console.log('Current position as a FEN string:')\n    console.log(board.fen())\n}\n")),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("h3",{id:"onchange"},"OnChange"),(0,l.kt)("h2",{id:"integrations"},"Integrations"),(0,l.kt)("h3",{id:"only-allow-legal-moves"},"Only allow legal moves"),(0,l.kt)("p",null,"This will"),(0,l.kt)("p",null,"After preparing board and now we can make out AI."),(0,l.kt)("h2",{id:"preparing-evaluation-method"},"Preparing Evaluation Method"),(0,l.kt)("p",null,"First we need to prepare evaluation method which will be used in algorithm. Evaluation is technique that let players or algorithm decide which side is better in particular postion of the board. Based on these dicision palyer can decide either attac or loose and what move to do."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://chessfox.com/example-of-the-complete-evaluation-process-of-chess-a-chess-position/"},"Evaluation")," is kind of complex process so we use a simple method for that using ",(0,l.kt)("a",{parentName:"p",href:"https://www.chessprogramming.org/Simplified_Evaluation_Function"},"piece-square tables.")),(0,l.kt)("h3",{id:"pawns"},"Pawns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// pawn\n 0,  0,  0,  0,  0,  0,  0,  0,\n50, 50, 50, 50, 50, 50, 50, 50,\n10, 10, 20, 30, 30, 20, 10, 10,\n 5,  5, 10, 25, 25, 10,  5,  5,\n 0,  0,  0, 20, 20,  0,  0,  0,\n 5, -5,-10,  0,  0,-10, -5,  5,\n 5, 10, 10,-20,-20, 10, 10,  5,\n 0,  0,  0,  0,  0,  0,  0,  0\n")),(0,l.kt)("p",null,"Knight"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// knight\n-50,-40,-30,-30,-30,-30,-40,-50,\n-40,-20,  0,  0,  0,  0,-20,-40,\n-30,  0, 10, 15, 15, 10,  0,-30,\n-30,  5, 15, 20, 20, 15,  5,-30,\n-30,  0, 15, 20, 20, 15,  0,-30,\n-30,  5, 10, 15, 15, 10,  5,-30,\n-40,-20,  0,  5,  5,  0,-20,-40,\n-50,-40,-30,-30,-30,-30,-40,-50,\n")),(0,l.kt)("p",null,"Bishop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// bishop\n-20,-10,-10,-10,-10,-10,-10,-20,\n-10,  0,  0,  0,  0,  0,  0,-10,\n-10,  0,  5, 10, 10,  5,  0,-10,\n-10,  5,  5, 10, 10,  5,  5,-10,\n-10,  0, 10, 10, 10, 10,  0,-10,\n-10, 10, 10, 10, 10, 10, 10,-10,\n-10,  5,  0,  0,  0,  0,  5,-10,\n-20,-10,-10,-10,-10,-10,-10,-20,\n")),(0,l.kt)("p",null,"Rook"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"rook\n  0,  0,  0,  0,  0,  0,  0,  0,\n  5, 10, 10, 10, 10, 10, 10,  5,\n -5,  0,  0,  0,  0,  0,  0, -5,\n -5,  0,  0,  0,  0,  0,  0, -5,\n -5,  0,  0,  0,  0,  0,  0, -5,\n -5,  0,  0,  0,  0,  0,  0, -5,\n -5,  0,  0,  0,  0,  0,  0, -5,\n  0,  0,  0,  5,  5,  0,  0,  0\n")),(0,l.kt)("p",null,"Queen"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"//queen\n-20,-10,-10, -5, -5,-10,-10,-20,\n-10,  0,  0,  0,  0,  0,  0,-10,\n-10,  0,  5,  5,  5,  5,  0,-10,\n -5,  0,  5,  5,  5,  5,  0, -5,\n  0,  0,  5,  5,  5,  5,  0, -5,\n-10,  5,  5,  5,  5,  5,  0,-10,\n-10,  0,  5,  0,  0,  0,  0,-10,\n-20,-10,-10, -5, -5,-10,-10,-20\n")),(0,l.kt)("p",null,"King"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"king middle game\n-30,-40,-40,-50,-50,-40,-40,-30,\n-30,-40,-40,-50,-50,-40,-40,-30,\n-30,-40,-40,-50,-50,-40,-40,-30,\n-30,-40,-40,-50,-50,-40,-40,-30,\n-20,-30,-30,-40,-40,-30,-30,-20,\n-10,-20,-20,-20,-20,-20,-20,-10,\n 20, 20,  0,  0,  0,  0, 20, 20,\n 20, 30, 10,  0,  0, 10, 30, 20\n")),(0,l.kt)("p",null,"The middle game is defined since there is pawn shelter for king. When,"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Both sides have no queens or"),(0,l.kt)("li",{parentName:"ol"},"Every side which has a queen has additionally no other pieces or one minorpiece maximum.")),(0,l.kt)("p",null,"End game is defined. (But we only use middle game table for this steps.)"),(0,l.kt)("p",null,"King End Game"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// king end game\n-50,-40,-30,-20,-20,-30,-40,-50,\n-30,-20,-10,  0,  0,-10,-20,-30,\n-30,-10, 20, 30, 30, 20,-10,-30,\n-30,-10, 30, 40, 40, 30,-10,-30,\n-30,-10, 30, 40, 40, 30,-10,-30,\n-30,-10, 20, 30, 30, 20,-10,-30,\n-30,-30,  0,  0,  0,  0,-30,-30,\n-50,-30,-30,-30,-30,-30,-30,-50\n")),(0,l.kt)("h2",{id:"centipawn-values"},"Centipawn Values"),(0,l.kt)("p",null,"Centipawn is the unit of measure used in chess as measure of the advantage. A centipawn is considered as equal to 1/100 of a pawn. Therefore, ",(0,l.kt)("strong",{parentName:"p"},"100 centipawns = 1 pawn")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Pawns   => 100 centipawns"),(0,l.kt)("li",{parentName:"ul"},"Knight \t=> 300 centipawns"),(0,l.kt)("li",{parentName:"ul"},"Bishop \t=> 300 centipawns"),(0,l.kt)("li",{parentName:"ul"},"Rook    => 500 centipawns"),(0,l.kt)("li",{parentName:"ul"},"Queen   => 900 centipawns")),(0,l.kt)("h1",{id:"developing-ai-algorithm-for-play-chess"},"Developing AI algorithm for Play Chess"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Plminmax.gif/400px-Plminmax.gif"},"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Plminmax.gif/400px-Plminmax.gif")),(0,l.kt)("p",null,"Minimax Function Algorithm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function minimax (position, depth, maximizingPlayer) {\n    if depth == 0 or game over in position\n        return static evaluation of position\n    if maximizingPlayer\n        maxEval = -infinity\n        for each child of position\n            eval = minimax(child, depth-1, false)\n            maxEval = max(maxEval, eval)\n        return maxEval\n    else\n        minEval = +infinity\n        for each child of position\n            eval = minimax(child, depth-1, true)\n            minEval = min(minEval, eval)\n        return minEval\n}\n\n")),(0,l.kt)("p",null,"postion - current position"),(0,l.kt)("p",null,"depth - how many moves ahead we need to search"),(0,l.kt)("p",null,"maximizingPlayer = bool"),(0,l.kt)("p",null,"We can optimize this algorithm by introducing alpha beta"),(0,l.kt)("p",null,"This modification will speed up the code and reduce unnecessary calculations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"function minimax (position, depth, alpha, beta, maximizingPlayer) {\n    if depth == 0 or game over in position\n    return static evaluation of position\n\n    if maximizingPlayer\n        maxEval = -infinity\n    for each child of position\n    eval = minimax(child, depth-1, alpha, beta, false)\n    maxEval = max(maxEval, eval)\n    alpha = max (alpha, eval)\n    if beta <= alpha\n        break\n    return maxEval\nelse\n    minEval = +infinity\n    for each child of position\n    eval = minimax(child, depth-1, alpha, beta, true)\n    minEval = min(minEval, eval)\n    beta = min (beta, eval)\n    if beta <= alpha\n        break\n    return minEval\n}\n")))}g.isMDXComponent=!0}}]);